Grammar

    0 $accept: prog $end

    1 prog: decl_list

    2 decl_list: decl2
    3          | %empty

    4 decl2: decl2 decl
    5      | decl

    6 decl: var_decl SEMI_COL
    7     | func_decl

    8 var_decl: IDENTIFIER COLON type
    9         | IDENTIFIER COLON ARRAY type LBRACKET INTEGER_LITERAL RBRACKET
   10         | IDENTIFIER COLON type ASSIGN value

   11 value: INTEGER_LITERAL
   12      | STRING_LITERAL

   13 type: INTEGER
   14     | STRING

   15 func_decl: IDENTIFIER COLON FUNCTION type LPAREN params RPAREN compound_stmt

   16 params: param_list
   17       | %empty

   18 param_list: param_list COMMA param
   19           | param

   20 param: IDENTIFIER COLON type

   21 compound_stmt: LBRACE stmt_list RBRACE

   22 stmt_list: stmt_list stmt
   23          | stmt

   24 stmt: expr_stmt
   25     | var_decl SEMI_COL
   26     | FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN stmt
   27     | WHILE LPAREN expr RPAREN stmt
   28     | RETURN expr SEMI_COL
   29     | PRINT LPAREN expr RPAREN SEMI_COL
   30     | if_stmt
   31     | compound_stmt

   32 expr_stmt: expr SEMI_COL
   33          | SEMI_COL

   34 if_stmt: IF LPAREN expr RPAREN stmt
   35        | IF LPAREN expr RPAREN stmt ELSE stmt

   36 for_step: expr_stmt SEMI_COL
   37         | SEMI_COL

   38 expr: INTEGER_LITERAL
   39     | STRING_LITERAL
   40     | IDENTIFIER
   41     | LPAREN expr RPAREN
   42     | IDENTIFIER LBRACKET expr RBRACKET
   43     | IDENTIFIER LPAREN arg_list RPAREN
   44     | SUB expr
   45     | expr ADD expr
   46     | expr SUB expr
   47     | expr MUL expr
   48     | expr DIV expr
   49     | expr MOD expr
   50     | expr EQUAL expr
   51     | expr NOT_EQUAL expr
   52     | expr GT expr
   53     | expr GT_EQUAL expr
   54     | expr LT expr
   55     | expr LT_EQUAL expr
   56     | expr AND expr
   57     | expr OR expr
   58     | expr ASSIGN expr

   59 arg_list: arg_list COMMA expr
   60         | expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <int_value> (258) 9 11 26 38
    STRING_LITERAL <string_value> (259) 12 39
    IDENTIFIER <identifier> (260) 8 9 10 15 20 40 42 43
    LPAREN (261) 15 26 27 29 34 35 41 43
    RPAREN (262) 15 26 27 29 34 35 41 43
    LBRACE (263) 21
    RBRACE (264) 21
    LBRACKET (265) 9 42
    RBRACKET (266) 9 42
    WHILE (267) 27
    FOR (268) 26
    IF (269) 34 35
    ELSE (270) 35
    PRINT (271) 29
    ADD (272) 45
    SUB (273) 44 46
    MUL (274) 47
    DIV (275) 48
    MOD (276) 49
    LT (277) 54
    GT (278) 52
    LT_EQUAL (279) 55
    GT_EQUAL (280) 53
    NOT_EQUAL (281) 51
    EQUAL (282) 50
    SEMI_COL (283) 6 25 26 28 29 32 33 36 37
    COLON (284) 8 9 10 15 20
    COMMA (285) 18 59
    AND (286) 56
    OR (287) 57
    NOT (288)
    RETURN (289) 28
    FUNCTION (290) 15
    ARRAY (291) 9
    INTEGER (292) 13
    STRING (293) 14
    ASSIGN (294) 10 58


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    prog (41)
        on left: 1
        on right: 0
    decl_list (42)
        on left: 2 3
        on right: 1
    decl2 (43)
        on left: 4 5
        on right: 2 4
    decl (44)
        on left: 6 7
        on right: 4 5
    var_decl (45)
        on left: 8 9 10
        on right: 6 25
    value (46)
        on left: 11 12
        on right: 10
    type (47)
        on left: 13 14
        on right: 8 9 10 15 20
    func_decl (48)
        on left: 15
        on right: 7
    params (49)
        on left: 16 17
        on right: 15
    param_list (50)
        on left: 18 19
        on right: 16 18
    param (51)
        on left: 20
        on right: 18 19
    compound_stmt (52)
        on left: 21
        on right: 15 31
    stmt_list (53)
        on left: 22 23
        on right: 21 22
    stmt (54)
        on left: 24 25 26 27 28 29 30 31
        on right: 22 23 26 27 34 35
    expr_stmt (55)
        on left: 32 33
        on right: 24 36
    if_stmt (56)
        on left: 34 35
        on right: 30
    for_step (57)
        on left: 36 37
        on right: 26
    expr (58)
        on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 27 28 29 32 34 35 41 42 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    arg_list (59)
        on left: 59 60
        on right: 43 59


State 0

    0 $accept: . prog $end

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (decl_list)

    prog       go to state 2
    decl_list  go to state 3
    decl2      go to state 4
    decl       go to state 5
    var_decl   go to state 6
    func_decl  go to state 7


State 1

    8 var_decl: IDENTIFIER . COLON type
    9         | IDENTIFIER . COLON ARRAY type LBRACKET INTEGER_LITERAL RBRACKET
   10         | IDENTIFIER . COLON type ASSIGN value
   15 func_decl: IDENTIFIER . COLON FUNCTION type LPAREN params RPAREN compound_stmt

    COLON  shift, and go to state 8


State 2

    0 $accept: prog . $end

    $end  shift, and go to state 9


State 3

    1 prog: decl_list .

    $default  reduce using rule 1 (prog)


State 4

    2 decl_list: decl2 .
    4 decl2: decl2 . decl

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 2 (decl_list)

    decl       go to state 10
    var_decl   go to state 6
    func_decl  go to state 7


State 5

    5 decl2: decl .

    $default  reduce using rule 5 (decl2)


State 6

    6 decl: var_decl . SEMI_COL

    SEMI_COL  shift, and go to state 11


State 7

    7 decl: func_decl .

    $default  reduce using rule 7 (decl)


State 8

    8 var_decl: IDENTIFIER COLON . type
    9         | IDENTIFIER COLON . ARRAY type LBRACKET INTEGER_LITERAL RBRACKET
   10         | IDENTIFIER COLON . type ASSIGN value
   15 func_decl: IDENTIFIER COLON . FUNCTION type LPAREN params RPAREN compound_stmt

    FUNCTION  shift, and go to state 12
    ARRAY     shift, and go to state 13
    INTEGER   shift, and go to state 14
    STRING    shift, and go to state 15

    type  go to state 16


State 9

    0 $accept: prog $end .

    $default  accept


State 10

    4 decl2: decl2 decl .

    $default  reduce using rule 4 (decl2)


State 11

    6 decl: var_decl SEMI_COL .

    $default  reduce using rule 6 (decl)


State 12

   15 func_decl: IDENTIFIER COLON FUNCTION . type LPAREN params RPAREN compound_stmt

    INTEGER  shift, and go to state 14
    STRING   shift, and go to state 15

    type  go to state 17


State 13

    9 var_decl: IDENTIFIER COLON ARRAY . type LBRACKET INTEGER_LITERAL RBRACKET

    INTEGER  shift, and go to state 14
    STRING   shift, and go to state 15

    type  go to state 18


State 14

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 15

   14 type: STRING .

    $default  reduce using rule 14 (type)


State 16

    8 var_decl: IDENTIFIER COLON type .
   10         | IDENTIFIER COLON type . ASSIGN value

    ASSIGN  shift, and go to state 19

    $default  reduce using rule 8 (var_decl)


State 17

   15 func_decl: IDENTIFIER COLON FUNCTION type . LPAREN params RPAREN compound_stmt

    LPAREN  shift, and go to state 20


State 18

    9 var_decl: IDENTIFIER COLON ARRAY type . LBRACKET INTEGER_LITERAL RBRACKET

    LBRACKET  shift, and go to state 21


State 19

   10 var_decl: IDENTIFIER COLON type ASSIGN . value

    INTEGER_LITERAL  shift, and go to state 22
    STRING_LITERAL   shift, and go to state 23

    value  go to state 24


State 20

   15 func_decl: IDENTIFIER COLON FUNCTION type LPAREN . params RPAREN compound_stmt

    IDENTIFIER  shift, and go to state 25

    $default  reduce using rule 17 (params)

    params      go to state 26
    param_list  go to state 27
    param       go to state 28


State 21

    9 var_decl: IDENTIFIER COLON ARRAY type LBRACKET . INTEGER_LITERAL RBRACKET

    INTEGER_LITERAL  shift, and go to state 29


State 22

   11 value: INTEGER_LITERAL .

    $default  reduce using rule 11 (value)


State 23

   12 value: STRING_LITERAL .

    $default  reduce using rule 12 (value)


State 24

   10 var_decl: IDENTIFIER COLON type ASSIGN value .

    $default  reduce using rule 10 (var_decl)


State 25

   20 param: IDENTIFIER . COLON type

    COLON  shift, and go to state 30


State 26

   15 func_decl: IDENTIFIER COLON FUNCTION type LPAREN params . RPAREN compound_stmt

    RPAREN  shift, and go to state 31


State 27

   16 params: param_list .
   18 param_list: param_list . COMMA param

    COMMA  shift, and go to state 32

    $default  reduce using rule 16 (params)


State 28

   19 param_list: param .

    $default  reduce using rule 19 (param_list)


State 29

    9 var_decl: IDENTIFIER COLON ARRAY type LBRACKET INTEGER_LITERAL . RBRACKET

    RBRACKET  shift, and go to state 33


State 30

   20 param: IDENTIFIER COLON . type

    INTEGER  shift, and go to state 14
    STRING   shift, and go to state 15

    type  go to state 34


State 31

   15 func_decl: IDENTIFIER COLON FUNCTION type LPAREN params RPAREN . compound_stmt

    LBRACE  shift, and go to state 35

    compound_stmt  go to state 36


State 32

   18 param_list: param_list COMMA . param

    IDENTIFIER  shift, and go to state 25

    param  go to state 37


State 33

    9 var_decl: IDENTIFIER COLON ARRAY type LBRACKET INTEGER_LITERAL RBRACKET .

    $default  reduce using rule 9 (var_decl)


State 34

   20 param: IDENTIFIER COLON type .

    $default  reduce using rule 20 (param)


State 35

   21 compound_stmt: LBRACE . stmt_list RBRACE

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt_list      go to state 51
    stmt           go to state 52
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 36

   15 func_decl: IDENTIFIER COLON FUNCTION type LPAREN params RPAREN compound_stmt .

    $default  reduce using rule 15 (func_decl)


State 37

   18 param_list: param_list COMMA param .

    $default  reduce using rule 18 (param_list)


State 38

   38 expr: INTEGER_LITERAL .

    $default  reduce using rule 38 (expr)


State 39

   39 expr: STRING_LITERAL .

    $default  reduce using rule 39 (expr)


State 40

    8 var_decl: IDENTIFIER . COLON type
    9         | IDENTIFIER . COLON ARRAY type LBRACKET INTEGER_LITERAL RBRACKET
   10         | IDENTIFIER . COLON type ASSIGN value
   40 expr: IDENTIFIER .
   42     | IDENTIFIER . LBRACKET expr RBRACKET
   43     | IDENTIFIER . LPAREN arg_list RPAREN

    LPAREN    shift, and go to state 56
    LBRACKET  shift, and go to state 57
    COLON     shift, and go to state 58

    $default  reduce using rule 40 (expr)


State 41

   41 expr: LPAREN . expr RPAREN

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 60


State 42

   27 stmt: WHILE . LPAREN expr RPAREN stmt

    LPAREN  shift, and go to state 61


State 43

   26 stmt: FOR . LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN stmt

    LPAREN  shift, and go to state 62


State 44

   34 if_stmt: IF . LPAREN expr RPAREN stmt
   35        | IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 63


State 45

   29 stmt: PRINT . LPAREN expr RPAREN SEMI_COL

    LPAREN  shift, and go to state 64


State 46

   44 expr: SUB . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 65


State 47

   33 expr_stmt: SEMI_COL .

    $default  reduce using rule 33 (expr_stmt)


State 48

   28 stmt: RETURN . expr SEMI_COL

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 66


State 49

   25 stmt: var_decl . SEMI_COL

    SEMI_COL  shift, and go to state 67


State 50

   31 stmt: compound_stmt .

    $default  reduce using rule 31 (stmt)


State 51

   21 compound_stmt: LBRACE stmt_list . RBRACE
   22 stmt_list: stmt_list . stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    RBRACE           shift, and go to state 68
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt           go to state 69
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 52

   23 stmt_list: stmt .

    $default  reduce using rule 23 (stmt_list)


State 53

   24 stmt: expr_stmt .

    $default  reduce using rule 24 (stmt)


State 54

   30 stmt: if_stmt .

    $default  reduce using rule 30 (stmt)


State 55

   32 expr_stmt: expr . SEMI_COL
   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    SEMI_COL   shift, and go to state 81
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 56

   43 expr: IDENTIFIER LPAREN . arg_list RPAREN

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr      go to state 85
    arg_list  go to state 86


State 57

   42 expr: IDENTIFIER LBRACKET . expr RBRACKET

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 87


State 58

    8 var_decl: IDENTIFIER COLON . type
    9         | IDENTIFIER COLON . ARRAY type LBRACKET INTEGER_LITERAL RBRACKET
   10         | IDENTIFIER COLON . type ASSIGN value

    ARRAY    shift, and go to state 13
    INTEGER  shift, and go to state 14
    STRING   shift, and go to state 15

    type  go to state 16


State 59

   40 expr: IDENTIFIER .
   42     | IDENTIFIER . LBRACKET expr RBRACKET
   43     | IDENTIFIER . LPAREN arg_list RPAREN

    LPAREN    shift, and go to state 56
    LBRACKET  shift, and go to state 57

    $default  reduce using rule 40 (expr)


State 60

   41 expr: LPAREN expr . RPAREN
   45     | expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    RPAREN     shift, and go to state 88
    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 61

   27 stmt: WHILE LPAREN . expr RPAREN stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 89


State 62

   26 stmt: FOR LPAREN . INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN stmt

    INTEGER_LITERAL  shift, and go to state 90


State 63

   34 if_stmt: IF LPAREN . expr RPAREN stmt
   35        | IF LPAREN . expr RPAREN stmt ELSE stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 91


State 64

   29 stmt: PRINT LPAREN . expr RPAREN SEMI_COL

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 92


State 65

   44 expr: SUB expr .
   45     | expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    $default  reduce using rule 44 (expr)


State 66

   28 stmt: RETURN expr . SEMI_COL
   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    SEMI_COL   shift, and go to state 93
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 67

   25 stmt: var_decl SEMI_COL .

    $default  reduce using rule 25 (stmt)


State 68

   21 compound_stmt: LBRACE stmt_list RBRACE .

    $default  reduce using rule 21 (compound_stmt)


State 69

   22 stmt_list: stmt_list stmt .

    $default  reduce using rule 22 (stmt_list)


State 70

   45 expr: expr ADD . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 94


State 71

   46 expr: expr SUB . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 95


State 72

   47 expr: expr MUL . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 96


State 73

   48 expr: expr DIV . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 97


State 74

   49 expr: expr MOD . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 98


State 75

   54 expr: expr LT . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 99


State 76

   52 expr: expr GT . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 100


State 77

   55 expr: expr LT_EQUAL . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 101


State 78

   53 expr: expr GT_EQUAL . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 102


State 79

   51 expr: expr NOT_EQUAL . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 103


State 80

   50 expr: expr EQUAL . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 104


State 81

   32 expr_stmt: expr SEMI_COL .

    $default  reduce using rule 32 (expr_stmt)


State 82

   56 expr: expr AND . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 105


State 83

   57 expr: expr OR . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 106


State 84

   58 expr: expr ASSIGN . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 107


State 85

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr
   60 arg_list: expr .

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84

    $default  reduce using rule 60 (arg_list)


State 86

   43 expr: IDENTIFIER LPAREN arg_list . RPAREN
   59 arg_list: arg_list . COMMA expr

    RPAREN  shift, and go to state 108
    COMMA   shift, and go to state 109


State 87

   42 expr: IDENTIFIER LBRACKET expr . RBRACKET
   45     | expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    RBRACKET   shift, and go to state 110
    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 88

   41 expr: LPAREN expr RPAREN .

    $default  reduce using rule 41 (expr)


State 89

   27 stmt: WHILE LPAREN expr . RPAREN stmt
   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    RPAREN     shift, and go to state 111
    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 90

   26 stmt: FOR LPAREN INTEGER_LITERAL . SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN stmt

    SEMI_COL  shift, and go to state 112


State 91

   34 if_stmt: IF LPAREN expr . RPAREN stmt
   35        | IF LPAREN expr . RPAREN stmt ELSE stmt
   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    RPAREN     shift, and go to state 113
    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 92

   29 stmt: PRINT LPAREN expr . RPAREN SEMI_COL
   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    RPAREN     shift, and go to state 114
    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84


State 93

   28 stmt: RETURN expr SEMI_COL .

    $default  reduce using rule 28 (stmt)


State 94

   45 expr: expr . ADD expr
   45     | expr ADD expr .
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 45 (expr)


State 95

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   46     | expr SUB expr .
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 46 (expr)


State 96

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   47     | expr MUL expr .
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    $default  reduce using rule 47 (expr)


State 97

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   48     | expr DIV expr .
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    $default  reduce using rule 48 (expr)


State 98

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   49     | expr MOD expr .
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    $default  reduce using rule 49 (expr)


State 99

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   54     | expr LT expr .
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71
    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 54 (expr)


State 100

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   52     | expr GT expr .
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71
    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 52 (expr)


State 101

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   55     | expr LT_EQUAL expr .
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71
    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 55 (expr)


State 102

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   53     | expr GT_EQUAL expr .
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD  shift, and go to state 70
    SUB  shift, and go to state 71
    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 53 (expr)


State 103

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   51     | expr NOT_EQUAL expr .
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD       shift, and go to state 70
    SUB       shift, and go to state 71
    MUL       shift, and go to state 72
    DIV       shift, and go to state 73
    MOD       shift, and go to state 74
    LT        shift, and go to state 75
    GT        shift, and go to state 76
    LT_EQUAL  shift, and go to state 77
    GT_EQUAL  shift, and go to state 78

    $default  reduce using rule 51 (expr)


State 104

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   50     | expr EQUAL expr .
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD       shift, and go to state 70
    SUB       shift, and go to state 71
    MUL       shift, and go to state 72
    DIV       shift, and go to state 73
    MOD       shift, and go to state 74
    LT        shift, and go to state 75
    GT        shift, and go to state 76
    LT_EQUAL  shift, and go to state 77
    GT_EQUAL  shift, and go to state 78

    $default  reduce using rule 50 (expr)


State 105

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   56     | expr AND expr .
   57     | expr . OR expr
   58     | expr . ASSIGN expr

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80

    $default  reduce using rule 56 (expr)


State 106

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   57     | expr OR expr .
   58     | expr . ASSIGN expr

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82

    $default  reduce using rule 57 (expr)


State 107

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr
   58     | expr ASSIGN expr .

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84

    $default  reduce using rule 58 (expr)


State 108

   43 expr: IDENTIFIER LPAREN arg_list RPAREN .

    $default  reduce using rule 43 (expr)


State 109

   59 arg_list: arg_list COMMA . expr

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46

    expr  go to state 115


State 110

   42 expr: IDENTIFIER LBRACKET expr RBRACKET .

    $default  reduce using rule 42 (expr)


State 111

   27 stmt: WHILE LPAREN expr RPAREN . stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt           go to state 116
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 112

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL . INTEGER_LITERAL SEMI_COL for_step RPAREN stmt

    INTEGER_LITERAL  shift, and go to state 117


State 113

   34 if_stmt: IF LPAREN expr RPAREN . stmt
   35        | IF LPAREN expr RPAREN . stmt ELSE stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt           go to state 118
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 114

   29 stmt: PRINT LPAREN expr RPAREN . SEMI_COL

    SEMI_COL  shift, and go to state 119


State 115

   45 expr: expr . ADD expr
   46     | expr . SUB expr
   47     | expr . MUL expr
   48     | expr . DIV expr
   49     | expr . MOD expr
   50     | expr . EQUAL expr
   51     | expr . NOT_EQUAL expr
   52     | expr . GT expr
   53     | expr . GT_EQUAL expr
   54     | expr . LT expr
   55     | expr . LT_EQUAL expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . ASSIGN expr
   59 arg_list: arg_list COMMA expr .

    ADD        shift, and go to state 70
    SUB        shift, and go to state 71
    MUL        shift, and go to state 72
    DIV        shift, and go to state 73
    MOD        shift, and go to state 74
    LT         shift, and go to state 75
    GT         shift, and go to state 76
    LT_EQUAL   shift, and go to state 77
    GT_EQUAL   shift, and go to state 78
    NOT_EQUAL  shift, and go to state 79
    EQUAL      shift, and go to state 80
    AND        shift, and go to state 82
    OR         shift, and go to state 83
    ASSIGN     shift, and go to state 84

    $default  reduce using rule 59 (arg_list)


State 116

   27 stmt: WHILE LPAREN expr RPAREN stmt .

    $default  reduce using rule 27 (stmt)


State 117

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL . SEMI_COL for_step RPAREN stmt

    SEMI_COL  shift, and go to state 120


State 118

   34 if_stmt: IF LPAREN expr RPAREN stmt .
   35        | IF LPAREN expr RPAREN stmt . ELSE stmt

    ELSE  shift, and go to state 121

    $default  reduce using rule 34 (if_stmt)


State 119

   29 stmt: PRINT LPAREN expr RPAREN SEMI_COL .

    $default  reduce using rule 29 (stmt)


State 120

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL . for_step RPAREN stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 59
    LPAREN           shift, and go to state 41
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 122

    expr_stmt  go to state 123
    for_step   go to state 124
    expr       go to state 55


State 121

   35 if_stmt: IF LPAREN expr RPAREN stmt ELSE . stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt           go to state 125
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 122

   33 expr_stmt: SEMI_COL .
   37 for_step: SEMI_COL .

    RPAREN    reduce using rule 37 (for_step)
    $default  reduce using rule 33 (expr_stmt)


State 123

   36 for_step: expr_stmt . SEMI_COL

    SEMI_COL  shift, and go to state 126


State 124

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step . RPAREN stmt

    RPAREN  shift, and go to state 127


State 125

   35 if_stmt: IF LPAREN expr RPAREN stmt ELSE stmt .

    $default  reduce using rule 35 (if_stmt)


State 126

   36 for_step: expr_stmt SEMI_COL .

    $default  reduce using rule 36 (for_step)


State 127

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN . stmt

    INTEGER_LITERAL  shift, and go to state 38
    STRING_LITERAL   shift, and go to state 39
    IDENTIFIER       shift, and go to state 40
    LPAREN           shift, and go to state 41
    LBRACE           shift, and go to state 35
    WHILE            shift, and go to state 42
    FOR              shift, and go to state 43
    IF               shift, and go to state 44
    PRINT            shift, and go to state 45
    SUB              shift, and go to state 46
    SEMI_COL         shift, and go to state 47
    RETURN           shift, and go to state 48

    var_decl       go to state 49
    compound_stmt  go to state 50
    stmt           go to state 128
    expr_stmt      go to state 53
    if_stmt        go to state 54
    expr           go to state 55


State 128

   26 stmt: FOR LPAREN INTEGER_LITERAL SEMI_COL INTEGER_LITERAL SEMI_COL for_step RPAREN stmt .

    $default  reduce using rule 26 (stmt)
